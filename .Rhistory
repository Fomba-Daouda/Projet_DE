runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
library(shiny); runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
runApp('projet_fin.R')
runApp('Origine/HR-Analytics-main/projet_fin.R')
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
if
new_row["no cde Sortie"] <- givenDataFrame[i, "N..évènement"]
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(tempdF)
View(tempdF)
View(tempdF)
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
remotes::install_github("dreamRs/capture")
install_github("dreamRs/capture")
install_github("dreamRs/capture")
githubinstall("dreamRs/capture")
library(githubinstall)
githubinstall("dreamRs/capture")
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
install.packages("remotes")
install.packages("remotes")
remotes::install_github("dreamRs/capture")
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
library(FactoMineR)
library(Factoshiny)
data = read.table("/data_suicide")
print(getwd())
data = read.table("/data_suicide")
print(getwd())
data = read.table(paste0(getwd(),"/",data_suicide))
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"))
data
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data
res.ca = CA(data, nrow(data))
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
print(data[2, ])
res.ca = CA(data, nrow(data))
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
print(data[2:, ])
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
print(data[,2:nrow(data) ])
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
print(data[2:nrow(data)])
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
print(data[2:10])
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
print(data[2:10,])
res.ca = CA(data, nrow(data))
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
print(data[,2:10])
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
print(data[2::])
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
print(data[,-1])
res.ca = CA(data, nrow(data))
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data = data[,-1]
res.ca = CA(data, nrow(data))
res.hcpc.col = HCPC(res.ca$col)
library(Factoshiny)
library(tidyverse)
dat <- dat %>% column_to_rownames(., var = 'Sexe.Age')
library(Factoshiny)
library(tidyverse)
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data <- data %>% column_to_rownames(., var = 'Sexe.Age')
data = data[,-1]
res.ca = CA(data, nrow(data))
res.hcpc.col = HCPC(res.ca$col)
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data <- data %>% column_to_rownames(., var = 'Sexe.Age')
data = data[,-1]
res.ca = CA(data, nrow(data))
res.hcpc.col = HCPC(res.ca$col)
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data <- data %>% column_to_rownames(., var = 'Sexe.Age')
data = data[,-1]
res.ca = CA(data)
res.hcpc.col = HCPC(res.ca$col)
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data <- data %>% column_to_rownames(., var = 'Sexe.Age')
data = data[,-1]
res.ca = CA(data)
res.ca$col
res.hcpc.col = HCPC(res.ca$col)
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data <- data %>% column_to_rownames(., var = 'Sexe.Age')
data = data[,-1]
res = factoshiny(data)
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data <- data %>% column_to_rownames(., var = 'Sexe.Age')
data = data[,-1]
res = Factoshiny(data)
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data <- data %>% column_to_rownames(., var = 'Sexe.Age')
data = data[,-1]
res = Factoshiny(data)
#res.ca$col
#res.hcpc.col = HCPC(res.ca$col)
#res.hcpc.ind = HCPC(res.ca$row)
#res.hcpc = HCPC(res.ca,t.levels="all")
#res.ca$col
print(getwd())
data = read.table(paste0(getwd(),"/","data_suicide"), header = TRUE)
data <- data %>% column_to_rownames(., var = 'Sexe.Age')
data = data[,-1]
res = Factoshiny(data)
shiny::runApp('GitHub/Tp-Accompagnement-R/Tp Accompagnement')
runApp('GitHub/Tp-Accompagnement-R/Tp Accompagnement')
runApp('GitHub/Tp-Accompagnement-R/Tp Accompagnement')
shiny::runApp('GitHub/Tp-Accompagnement-R/Tp Accompagnement')
runApp('GitHub/Tp-Accompagnement-R/Tp Accompagnement')
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
force(dataMvtsStocks)
View(tempDataForMontYearHsCode)
View(tempDataForMontYearHsCode)
View(tempDataForMontYearHsCode)
View(tempDataForMontYearHsCode)
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(dataMvtsStockss)
View(dataMvtsStockss)
View(monthData)
View(monthData)
View(dataMvtsStockss)
View(dataMvtsStockss)
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(densitesPoids)
View(densitesPoids)
View(densitesPoids)
View(densitesPoids)
library("caret")
library("MixSim")
library("MASS")
# Création de jeux de données avec MixSim
# jeu 1
jeu1.Q <- MixSim(MaxOmega = 0.0, BarOmega = 0.0, K = 2, p = 2, sph = TRUE)
jeu1 <- simdataset(n = 500, Pi = jeu1.Q$Pi, Mu = jeu1.Q$Mu, S = jeu1.Q$S)
View(jeu1)
View(jeu1)
#jeu 2
jeu2.Q <- MixSim(MaxOmega = 0.10, BarOmega = 0.05, K = 3, p = 2, sph = TRUE)
jeu2 <- simdataset(n = 500, Pi = jeu2.Q$Pi, Mu = jeu2.Q$Mu, S = jeu2.Q$S)
#jeu 3
jeu3.Q <- MixSim(MaxOmega = 0.10, BarOmega = 0.05, K = 3, p = 2, sph = FALSE)
jeu3 <- simdataset(n = 500, Pi = jeu3.Q$Pi, Mu = jeu3.Q$Mu, S = jeu3.Q$S)
# Représentation graphique
my_plot = function(jeu, predicts, title){
plot(jeu$X, col = colors[predicts], pch = 19, cex = 0.8,
xlab = "", ylab = "", axes = F, main = title)
box()
}
# Représentation graphique
my_plot = function(jeu, predicts, title){
plot(jeu$X, col = colors[predicts], pch = 19, cex = 0.8,
xlab = "", ylab = "", axes = F, main = title)
box()
}
colors <- c("red", "green", "blue")
par(mfrow=c(1,3))
Sigma1_1 = matrix(jeu1.Q$S[1:4], nrow = 2)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
if (!require(caret)) install.packages('caret')
if (!require(MixSim)) install.packages('MixSim')
if (!require(MASS)) install.packages('MASS')
if (!require(caret)) install.packages('caret')
if (!require(MixSim)) install.packages('MixSim')
if (!require(MASS)) install.packages('MASS')
# premier jeu de données
jeu1.Q <- MixSim(MaxOmega = 0.0, BarOmega = 0.0, K = 2, p = 2, sph = TRUE)
jeu1 <- simdataset(n = 500, Pi = jeu1.Q$Pi, Mu = jeu1.Q$Mu, S = jeu1.Q$S)
#deuxième jeu de données
jeu2.Q <- MixSim(MaxOmega = 0.10, BarOmega = 0.05, K = 3, p = 2, sph = TRUE)
jeu2 <- simdataset(n = 500, Pi = jeu2.Q$Pi, Mu = jeu2.Q$Mu, S = jeu2.Q$S)
#troisième jeu de données
jeu3.Q <- MixSim(MaxOmega = 0.10, BarOmega = 0.05, K = 3, p = 2, sph = FALSE)
jeu3 <- simdataset(n = 500, Pi = jeu3.Q$Pi, Mu = jeu3.Q$Mu, S = jeu3.Q$S)
# Représentation graphique
my_plot = function(jeu, predicts, title){
plot(jeu$X, col = colors[predicts], pch = 19, cex = 0.8,
xlab = "", ylab = "", axes = F, main = title)
box()
}
colors <- c("red", "green", "blue")
par(mfrow=c(1,3))
View(Sigma1_1)
View(jeu1.Q)
# Fonction discriminante quadratique
library("caret")
library("MixSim")
library("MASS")
# Création de jeux de données avec MixSim
# jeu 1
jeu1.Q <- MixSim(MaxOmega = 0.0, BarOmega = 0.0, K = 2, p = 2, sph = TRUE)
jeu1 <- simdataset(n = 500, Pi = jeu1.Q$Pi, Mu = jeu1.Q$Mu, S = jeu1.Q$S)
#jeu 2
jeu2.Q <- MixSim(MaxOmega = 0.10, BarOmega = 0.05, K = 3, p = 2, sph = TRUE)
jeu2 <- simdataset(n = 500, Pi = jeu2.Q$Pi, Mu = jeu2.Q$Mu, S = jeu2.Q$S)
#jeu 3
jeu3.Q <- MixSim(MaxOmega = 0.10, BarOmega = 0.05, K = 3, p = 2, sph = FALSE)
jeu3 <- simdataset(n = 500, Pi = jeu3.Q$Pi, Mu = jeu3.Q$Mu, S = jeu3.Q$S)
# Représentation graphique
my_plot = function(jeu, predicts, title){
plot(jeu$X, col = colors[predicts], pch = 19, cex = 0.8,
xlab = "", ylab = "", axes = F, main = title)
box()
}
colors <- c("red", "green", "blue")
par(mfrow=c(1,3))
library("caret")
library("MixSim")
library("MASS")
# Création de jeux de données avec MixSim
# jeu 1
jeu1.Q <- MixSim(MaxOmega = 0.0, BarOmega = 0.0, K = 2, p = 2, sph = TRUE)
jeu1 <- simdataset(n = 500, Pi = jeu1.Q$Pi, Mu = jeu1.Q$Mu, S = jeu1.Q$S)
#jeu 2
jeu2.Q <- MixSim(MaxOmega = 0.10, BarOmega = 0.05, K = 3, p = 2, sph = TRUE)
jeu2 <- simdataset(n = 500, Pi = jeu2.Q$Pi, Mu = jeu2.Q$Mu, S = jeu2.Q$S)
#jeu 3
jeu3.Q <- MixSim(MaxOmega = 0.10, BarOmega = 0.05, K = 3, p = 2, sph = FALSE)
jeu3 <- simdataset(n = 500, Pi = jeu3.Q$Pi, Mu = jeu3.Q$Mu, S = jeu3.Q$S)
# Représentation graphique
my_plot = function(jeu, predicts, title){
plot(jeu$X, col = colors[predicts], pch = 19, cex = 0.8,
xlab = "", ylab = "", axes = F, main = title)
box()
}
colors <- c("red", "green", "blue")
par(mfrow=c(1,3))
Sigma1_1 = matrix(jeu1.Q$S[1:4], nrow = 2)
Sigma2_1 = matrix(jeu1.Q$S[5:8], nrow = 2)
G1_1 <- c()
G2_1 <- c()
for (i in 1:500)
{
X= jeu1$X[i,]
G1_1 <- append(G1_1,-0.5*log(det(Sigma1_1))-0.5*(t(X-jeu1.Q$Mu[1,]))%*%solve(Sigma1_1)%*%(X-jeu1.Q$Mu[1,]) + log(jeu1.Q$Pi[1]))
G2_1 <- append(G2_1,-0.5*log(det(Sigma2_1))-0.5*(t(X-jeu1.Q$Mu[2,]))%*%solve(Sigma2_1)%*%(X-jeu1.Q$Mu[2,]) + log(jeu1.Q$Pi[2]))
}
matrice_1 <- cbind(matrix(G1_1,500),matrix(G2_1,500))
matrice_1<-cbind(cbind(matrix(G1_1,500), matrix(G2_1,500)),matrix(apply(matrice_1, 1, which.max),500))
matrice_1
Sigma1_2 = matrix(jeu2.Q$S[1:4],nrow=2)
Sigma2_2 = matrix(jeu2.Q$S[5:8],nrow=2)
Sigma3_2 = matrix(jeu2.Q$S[9:12],nrow=2)
G1_2 <- c()
G2_2 <- c()
G3_2 <- c()
for (i in 1:500)
{
X= jeu2$X[i,]
G1_2 <- append(G1_2,-0.5*log(det(Sigma1_2))-0.5*(t(X-jeu2.Q$Mu[1,]))%*%solve(Sigma1_2)%*%(X-jeu2.Q$Mu[1,]) + log(jeu2.Q$Pi[1]))
G2_2 <- append(G2_2,-0.5*log(det(Sigma2_2))-0.5*(t(X-jeu2.Q$Mu[2,]))%*%solve(Sigma2_2)%*%(X-jeu2.Q$Mu[2,]) + log(jeu2.Q$Pi[2]))
G3_2 <- append(G3_2,-0.5*log(det(Sigma3_2))-0.5*(t(X-jeu2.Q$Mu[3,]))%*%solve(Sigma3_2)%*%(X-jeu2.Q$Mu[3,]) + log(jeu2.Q$Pi[3]))
}
matrice_2 <- cbind(matrix(G1_2,500),matrix(G2_2,500),matrix(G3_2,500))
matrice_2<-cbind(cbind(matrix(G1_1,500), matrix(G2_1,500),matrix(G3_2,500)),matrix(apply(matrice_2, 1, which.max),500))
Sigma1_3 = matrix(jeu3.Q$S[1:4],nrow=2)
Sigma2_3 = matrix(jeu3.Q$S[5:8],nrow=2)
Sigma3_3 = matrix(jeu3.Q$S[9:12],nrow=2)
G1_3 <- c()
G2_3 <- c()
G3_3 <- c()
for (i in 1:500)
{
X= jeu2$X[i,]
G1_3 <- append(G1_3,-0.5*log(det(Sigma1_3))-0.5*(t(X-jeu3.Q$Mu[1,]))%*%solve(Sigma1_3)%*%(X-jeu3.Q$Mu[1,]) + log(jeu3.Q$Pi[1]))
G2_3 <- append(G2_3,-0.5*log(det(Sigma2_3))-0.5*(t(X-jeu3.Q$Mu[2,]))%*%solve(Sigma2_3)%*%(X-jeu3.Q$Mu[2,]) + log(jeu3.Q$Pi[2]))
G3_3 <- append(G3_3,-0.5*log(det(Sigma3_3))-0.5*(t(X-jeu3.Q$Mu[3,]))%*%solve(Sigma3_3)%*%(X-jeu3.Q$Mu[3,]) + log(jeu3.Q$Pi[3]))
}
matrice_3 <- cbind(matrix(G1_3,500),matrix(G2_3,500),matrix(G3_3,500))
matrice_3<-cbind(cbind(matrix(G1_3,500), matrix(G2_3,500),matrix(G3_3,500)),matrix(apply(matrice_3, 1, which.max),500))
matrice_3
## ************* Plotting ************************
#
my_plot(jeu1,jeu1$id,"Dataset1 with MixSim")
my_plot(jeu1,matrice_1[,3],"Dataset1 with Gi")
my_plot(jeu2,jeu2$id,"Dataset2 with MixSim")
my_plot(jeu2,matrice_2[,4],"Dataset2 with Gi")
my_plot(jeu3,jeu3$id,"Dataset3 with MixSim")
my_plot(jeu3,matrice_3[,4],"Dataset 3 with Gi")
cm1 <- confusionMatrix(data=factor(matrix1[,3]), reference = factor(matrix1[,4]))
cm1
cm2 <- confusionMatrix(data=factor(matrix2[,4]), reference = factor(matrix2[,5]))
cm2
cm3 <- confusionMatrix(data=factor(matrix3[,4]), reference = factor(matrix3[,5]))
cm3
shiny::runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-shiny-master/Twitter-Sentiment-Analysis-using-R-shiny-master')
install.packages('zipcode')
runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-shiny-master/Twitter-Sentiment-Analysis-using-R-shiny-master')
install.packages('zipcode')
runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-shiny-master/Twitter-Sentiment-Analysis-using-R-shiny-master')
install_github("twitterR", force=TRUE)
install_github("twitteR", force=TRUE)
install_github("twitteR", force=TRUE)
twitteR:::setup_twitter_oauth()
runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-shiny-master/Twitter-Sentiment-Analysis-using-R-shiny-master')
remove.packages("twitteR")
remove.packages("httr")
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
shiny::runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master')
library(httr)
runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master')
runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master')
sessionInfo()
remove.packages("httr")
install.packages("httr", version='0.6.0')
install.packages("httr", version = "0.6.0")
remove.packages("httr")
install.packages("httr", version = "1.2.1")
remove.packages("httr")
install.packages("httr", version = "1.2.1", force=TRUE)
shiny::runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master')
remove.packages("httr")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/httr/httr_0.6.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master')
install.packages(packageurl, repos=NULL, type="source")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/httr/httr_0.6.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
shiny::runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master')
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0", force=T)
shiny::runApp('M2/Tp Git/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master/Twitter-Sentiment-Analysis-using-R-Shiny-WebApp-master')
remove.packages("httpuv")
remove.packages("httr")
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0", force=T)
install.packages("shiny")
install.packages(c("ade4", "bit", "Boruta", "bslib", "callr", "cli", "data.table", "digest", "emmeans", "evaluate", "FactoMineR", "forestplot", "future", "future.apply", "gert", "ggplot2", "ggrepel", "globals", "Gmisc", "gtools", "Hmisc", "htmltools", "jpeg", "jsonlite", "knitr", "lme4", "lubridate", "markdown", "Matrix", "mice", "modelr", "pkgbuild", "pkgdown", "pkgload", "plotly", "plyr", "png", "progressr", "R.utils", "RcppEigen", "recipes", "rmarkdown", "RMySQL", "RODBC", "roxygen2", "RSQLite", "sass", "shinyWidgets", "sp", "stringr", "testthat", "timeDate", "tinytex", "tm", "twitteR", "vctrs", "whisker", "xfun", "XML"))
install.packages(c("boot", "foreign", "Matrix"), lib="C:/Users/AFEDOUNG/AppData/Local/Programs/R/R-4.2.2/library")
remove.packages("shiny")
install.packages("shiny")
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
install.packages("httr")
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
install.packages(c("ade4", "bit", "cli", "data.table", "digest", "Hmisc", "htmltools", "jpeg", "jsonlite", "lubridate", "Matrix", "plyr", "png", "RODBC", "roxygen2", "sass", "vctrs", "xfun"))
install.packages(c("boot", "foreign", "Matrix"), lib="C:/Users/AFEDOUNG/AppData/Local/Programs/R/R-4.2.2/library")
install.packages(c("ade4", "bit", "cli", "data.table", "digest", "Hmisc", "htmltools", "jpeg", "jsonlite", "lubridate", "Matrix", "plyr", "png", "RODBC", "roxygen2", "sass", "vctrs", "xfun"))
install.packages(c("ade4", "bit", "cli", "data.table", "digest", "Hmisc", "htmltools", "jpeg", "jsonlite", "lubridate", "Matrix", "plyr", "png", "RODBC", "roxygen2", "sass", "vctrs", "xfun"))
install.packages(c("ade4", "bit", "cli", "data.table", "digest", "Hmisc", "htmltools", "jpeg", "jsonlite", "lubridate", "Matrix", "plyr", "png", "RODBC", "roxygen2", "sass", "vctrs", "xfun"))
library(shiny); runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(dataForHs)
View(dataFinal)
View(tempDataHs)
View(tempDataForHs)
View(tempDataForHs)
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(dataFinal)
View(dataForHs)
View(tempDataForHs)
View(tempDataForHs)
View(dataFinal)
View(dataForHs)
View(dataForHs)
View(dataFinal)
View(dataForHs)
View(dataFinal)
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(dataFinal)
View(dataForHs)
View(dateRowHs)
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
shiny::runApp('M2/Tp DE')
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(dataMvtsStocks)
View(tempDataForMontYearHsCode)
View(dataMvtsStocks)
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(dataMvtsStocks)
View(dataMvtsStocks)
View(tempDataForMontYearHsCode)
View(dataMvtsStocks)
View(tempDataStocksForMontYearHsCode)
View(tempDataStocksForMontYearHsCode)
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
View(dataSotcks)
runApp('GitHub/declaration-automation-base-on-R/projet_fin.R')
shiny::runApp('GitHub/Projet_DE')
runApp('GitHub/Projet_DE')
